from datetime import datetime

from aiogram import F, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from models.database import Database, UserProfile
from utils.ai_assistant import AIAssistant

router = Router()
db = Database()
ai_assistant = AIAssistant()


class ProfileStates(StatesGroup):
    waiting_for_background = State()
    waiting_for_interests = State()
    waiting_for_skills = State()
    waiting_for_goals = State()


def create_main_menu() -> InlineKeyboardMarkup:
    """Create main menu keyboard"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")],
            [InlineKeyboardButton(text="üìä –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã", callback_data="compare_programs")],
            [
                InlineKeyboardButton(
                    text="üéØ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é", callback_data="get_recommendation"
                )
            ],
            [InlineKeyboardButton(text="üìö –ì–∏–¥ –ø–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é", callback_data="admission_guide")],
            [InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="user_profile")],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
        ]
    )
    return keyboard


def create_profile_menu() -> InlineKeyboardMarkup:
    """Create profile management menu"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="setup_profile")],
            [InlineKeyboardButton(text="üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="view_profile")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="update_profile")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ]
    )
    return keyboard


@router.message(Command("start"))
async def cmd_start(message: Message):
    """Handle /start command"""
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    # Check if user exists
    existing_profile = db.get_user_profile(user_id)

    welcome_text = f"""
üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –ò–¢–ú–û –ø–æ –ò–ò!

–ü—Ä–∏–≤–µ—Ç, {username}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã –∏ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ.

üîç **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:**
‚Ä¢ "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç" - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
‚Ä¢ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏/AI Product" - –ø—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞

üí° **–ß—Ç–æ —è —É–º–µ—é:**
‚úÖ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö
‚úÖ –°—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
‚úÖ –î–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚úÖ –ü–æ–º–æ–≥–∞—Ç—å —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
"""

    if not existing_profile:
        welcome_text += "\nüÜï *–†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π*"

    await message.answer(welcome_text, reply_markup=create_main_menu(), parse_mode="Markdown")


@router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: CallbackQuery):
    """Show main menu"""
    await callback.message.edit_text(
        "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_menu(),
        parse_mode="Markdown",
    )
    await callback.answer()


@router.callback_query(F.data == "ask_question")
async def ask_question_mode(callback: CallbackQuery, state: FSMContext):
    """Enable question mode"""
    await callback.message.edit_text(
        "ü§ñ **–†–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω**\n\n"
        "–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –ò–¢–ú–û –ø–æ –ò–ò.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ –ß–µ–º –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º—ã?\n"
        "‚Ä¢ –ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è?\n"
        "‚Ä¢ –ö–∞–∫–∏–µ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã?\n"
        "‚Ä¢ –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –æ–±—É—á–µ–Ω–∏–µ?\n\n"
        "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        parse_mode="Markdown",
    )
    await state.set_state("waiting_for_question")
    await callback.answer()


@router.message(StateFilter("waiting_for_question"))
async def process_question(message: Message, state: FSMContext):
    """Process user question"""
    user_question = message.text
    user_id = message.from_user.id

    # Show typing indicator
    await message.bot.send_chat_action(message.chat.id, "typing")

    try:
        # Get AI response
        ai_response = await ai_assistant.get_response(user_question, user_id)

        # Send response with main menu
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            ]
        )

        await message.answer(ai_response, reply_markup=keyboard, parse_mode="Markdown")

    except Exception:
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=create_main_menu(),
        )

    await state.clear()


@router.callback_query(F.data == "compare_programs")
async def compare_programs(callback: CallbackQuery):
    """Show programs comparison"""
    await callback.message.edit_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º...")
    await callback.answer()

    try:
        comparison = ai_assistant.compare_programs()

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üéØ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é", callback_data="get_recommendation"
                    )
                ],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            ]
        )

        await callback.message.edit_text(comparison, reply_markup=keyboard, parse_mode="Markdown")

    except Exception:
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=create_main_menu()
        )


@router.callback_query(F.data == "get_recommendation")
async def get_recommendation(callback: CallbackQuery):
    """Get personalized recommendation"""
    user_id = callback.from_user.id
    user_profile = db.get_user_profile(user_id)

    if not user_profile:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úèÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="setup_profile")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            ]
        )

        await callback.message.edit_text(
            "üéØ **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.\n\n"
            "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ:\n"
            "‚Ä¢ –ü–æ–Ω—è—Ç—å –≤–∞—à —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –±—ç–∫–≥—Ä–∞—É–Ω–¥\n"
            "‚Ä¢ –£–∑–Ω–∞—Ç—å –≤–∞—à–∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Ü–µ–ª–∏\n"
            "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã",
            reply_markup=keyboard,
            parse_mode="Markdown",
        )
        await callback.answer()
        return

    await callback.message.edit_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é...")
    await callback.answer()

    try:
        recommendation = ai_assistant.generate_program_recommendation(user_profile)

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="update_profile")],
                [
                    InlineKeyboardButton(
                        text="üìö –ì–∏–¥ –ø–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é", callback_data="admission_guide"
                    )
                ],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            ]
        )

        await callback.message.edit_text(
            f"üéØ **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**\n\n{recommendation}",
            reply_markup=keyboard,
            parse_mode="Markdown",
        )

    except Exception:
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=create_main_menu()
        )


@router.callback_query(F.data == "admission_guide")
async def admission_guide(callback: CallbackQuery):
    """Show admission guide"""
    await callback.message.edit_text("üìö –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥–∏–¥ –ø–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é...")
    await callback.answer()

    try:
        guide = ai_assistant.generate_admission_guide()

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üéØ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é", callback_data="get_recommendation"
                    )
                ],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            ]
        )

        await callback.message.edit_text(guide, reply_markup=keyboard, parse_mode="Markdown")

    except Exception:
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–∏–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=create_main_menu()
        )


@router.callback_query(F.data == "user_profile")
async def user_profile_menu(callback: CallbackQuery):
    """Show user profile menu"""
    await callback.message.edit_text(
        "üë§ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º**\n\n"
        "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –æ–±—É—á–µ–Ω–∏—è.",
        reply_markup=create_profile_menu(),
        parse_mode="Markdown",
    )
    await callback.answer()


@router.callback_query(F.data == "view_profile")
async def view_profile(callback: CallbackQuery):
    """View user profile"""
    user_id = callback.from_user.id
    user_profile = db.get_user_profile(user_id)

    if not user_profile:
        await callback.message.edit_text(
            "üë§ **–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω.\n\n"
            "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.",
            reply_markup=create_profile_menu(),
            parse_mode="Markdown",
        )
        await callback.answer()
        return

    profile_text = f"""
üë§ **–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å**

üè∑Ô∏è **–ò–º—è:** {user_profile.username}
üìö **–ò–Ω—Ç–µ—Ä–µ—Å—ã:** {', '.join(user_profile.interests) if user_profile.interests else '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
üíª **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏:** {', '.join(user_profile.technical_skills) if user_profile.technical_skills else '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
üéØ **–ö–∞—Ä—å–µ—Ä–Ω—ã–µ —Ü–µ–ª–∏:** {', '.join(user_profile.career_goals) if user_profile.career_goals else '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
üìñ **–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:** {user_profile.preferred_program or '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'}

üìÖ **–°–æ–∑–¥–∞–Ω:** {user_profile.created_at[:10] if user_profile.created_at else 'N/A'}
üîÑ **–û–±–Ω–æ–≤–ª–µ–Ω:** {user_profile.updated_at[:10] if user_profile.updated_at else 'N/A'}
"""

    await callback.message.edit_text(
        profile_text, reply_markup=create_profile_menu(), parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data.in_(["setup_profile", "update_profile"]))
async def setup_profile(callback: CallbackQuery, state: FSMContext):
    """Start profile setup"""
    await callback.message.edit_text(
        "‚úèÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è**\n\n"
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–≤–æ–µ–º –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º/–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –±—ç–∫–≥—Ä–∞—É–Ω–¥–µ.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ –ö–∞–∫–æ–µ —É –≤–∞—Å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ\n"
        "‚Ä¢ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ –ü—Ä–æ–µ–∫—Ç—ã, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º–∏ —Ä–∞–±–æ—Ç–∞–ª–∏\n"
        "‚Ä¢ –ß—Ç–æ –∏–∑—É—á–∞–ª–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ\n\n"
        "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:"
    )
    await state.set_state(ProfileStates.waiting_for_background)
    await callback.answer()


@router.message(ProfileStates.waiting_for_background)
async def process_background(message: Message, state: FSMContext):
    """Process background information"""
    await state.update_data(background=message.text)

    await message.answer(
        "üéØ **–í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã**\n\n"
        "–ö–∞–∫–∏–µ –æ–±–ª–∞—Å—Ç–∏ –ò–ò/ML –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ\n"
        "‚Ä¢ –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ\n"
        "‚Ä¢ NLP\n"
        "‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
        "‚Ä¢ AI –ø—Ä–æ–¥—É–∫—Ç—ã\n\n"
        "üí¨ –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
    )
    await state.set_state(ProfileStates.waiting_for_interests)


@router.message(ProfileStates.waiting_for_interests)
async def process_interests(message: Message, state: FSMContext):
    """Process interests"""
    interests = [interest.strip() for interest in message.text.split(",")]
    await state.update_data(interests=interests)

    await message.answer(
        "üíª **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏**\n\n"
        "–ö–∞–∫–∏–º–∏ —è–∑—ã–∫–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞–º–∏ –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –≤—ã –≤–ª–∞–¥–µ–µ—Ç–µ?\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ Python, R, SQL\n"
        "‚Ä¢ TensorFlow, PyTorch\n"
        "‚Ä¢ Docker, Git\n"
        "‚Ä¢ Jupyter, Pandas\n\n"
        "üí¨ –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
    )
    await state.set_state(ProfileStates.waiting_for_skills)


@router.message(ProfileStates.waiting_for_skills)
async def process_skills(message: Message, state: FSMContext):
    """Process technical skills"""
    skills = [skill.strip() for skill in message.text.split(",")]
    await state.update_data(skills=skills)

    await message.answer(
        "üéØ **–ö–∞—Ä—å–µ—Ä–Ω—ã–µ —Ü–µ–ª–∏**\n\n"
        "–ö–∞–∫–∏–µ —É –≤–∞—Å –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã?\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ ML Engineer –≤ –∫—Ä—É–ø–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏\n"
        "‚Ä¢ Product Manager –≤ AI —Å—Ç–∞—Ä—Ç–∞–ø–µ\n"
        "‚Ä¢ Data Scientist\n"
        "‚Ä¢ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ\n"
        "‚Ä¢ –û—Å–Ω–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é\n\n"
        "üí¨ –û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Ü–µ–ª–∏:"
    )
    await state.set_state(ProfileStates.waiting_for_goals)


@router.message(ProfileStates.waiting_for_goals)
async def process_goals(message: Message, state: FSMContext):
    """Process career goals and save profile"""
    goals = [goal.strip() for goal in message.text.split(",") if goal.strip()]
    user_data = await state.get_data()

    # Create user profile
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    now = datetime.now().isoformat()

    profile = UserProfile(
        user_id=user_id,
        username=username,
        background={"description": user_data.get("background", "")},
        interests=user_data.get("interests", []),
        technical_skills=user_data.get("skills", []),
        career_goals=goals,
        preferred_program=None,
        created_at=now,
        updated_at=now,
    )

    success = db.save_user_profile(profile)

    if success:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üéØ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é", callback_data="get_recommendation"
                    )
                ],
                [InlineKeyboardButton(text="üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="view_profile")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            ]
        )

        await message.answer(
            "‚úÖ **–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –æ–±—É—á–µ–Ω–∏—è.",
            reply_markup=keyboard,
            parse_mode="Markdown",
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=create_main_menu()
        )

    await state.clear()


@router.callback_query(F.data == "help")
async def show_help(callback: CallbackQuery):
    """Show help information"""
    help_text = """
‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞**

ü§ñ **–û –±–æ—Ç–µ:**
–Ø –ø–æ–º–æ–≥–∞—é –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º –≤—ã–±—Ä–∞—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ –ò–¢–ú–û –≤ –æ–±–ª–∞—Å—Ç–∏ –ò–ò –∏ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ.

üìö **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:**
‚Ä¢ "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç" - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
‚Ä¢ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏/AI Product" - –ø—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞

üîß **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö
‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è
‚Ä¢ –ì–∏–¥ –ø–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä–Ω—ã–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º

‚ö†Ô∏è **–í–∞–∂–Ω–æ:**
–Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º–∏ –¥–≤—É–º—è –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã –ò–¢–ú–û.

üìû **–ö–æ–º–∞–Ω–¥—ã:**
/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

üë§ **–ü—Ä–æ—Ñ–∏–ª—å:**
–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!
"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="setup_profile")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ]
    )

    await callback.message.edit_text(help_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()


@router.message(Command("help"))
async def cmd_help(message: Message):
    """Handle /help command"""
    await show_help(
        CallbackQuery(
            id="help_cmd",
            from_user=message.from_user,
            chat_instance="help",
            data="help",
            message=message,
        )
    )


# Fallback handler for any other messages
@router.message()
async def handle_other_messages(message: Message):
    """Handle any other messages as questions"""
    user_id = message.from_user.id
    user_question = message.text

    # Show typing indicator
    await message.bot.send_chat_action(message.chat.id, "typing")

    try:
        # Get AI response
        ai_response = await ai_assistant.get_response(user_question, user_id)

        # Send response with main menu
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            ]
        )

        await message.answer(ai_response, reply_markup=keyboard, parse_mode="Markdown")

    except Exception:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—é.",
            reply_markup=create_main_menu(),
        )
