[project]
name = "ai-master-2025-chatbot"
version = "1.0.0"
description = "Чат-бот для консультации абитуриентов по магистерским программам ИТМО в области ИИ"
authors = [
    {name = "AI Assistant", email = "ai@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
keywords = ["telegram", "bot", "ai", "itmo", "education", "chatbot"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Education",
    "Topic :: Communications :: Chat",
]

dependencies = [
    "aiogram>=3.4.1,<4.0.0",
    "aiohttp>=3.9.1,<4.0.0",
    "openai>=1.12.0,<2.0.0",
    "beautifulsoup4>=4.12.2,<5.0.0",
    "requests>=2.31.0,<3.0.0",
    "pandas>=2.1.4,<3.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "pydantic>=2.5.3,<3.0.0",
    "pydantic-settings>=2.0.0,<3.0.0",
    "fastapi>=0.109.0,<1.0.0",
    "uvicorn>=0.27.0,<1.0.0",
    "pypdf2>=3.0.1,<4.0.0",
    "lxml>=4.9.4,<5.0.0",
    "aiosqlite>=0.19.0,<1.0.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "types-requests>=2.31.0",
    "types-beautifulsoup4>=4.12.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
    "aioresponses>=0.7.4",
    "factory-boy>=3.3.0",
]

[project.urls]
Homepage = "https://github.com/username/ai-master-2025-chatbot"
Repository = "https://github.com/username/ai-master-2025-chatbot.git"
Issues = "https://github.com/username/ai-master-2025-chatbot/issues"

[project.scripts]
ai-chatbot = "main:main"
parse-data = "parse_data:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["bot", "handlers", "models", "parsers", "utils"]

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py39"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "aiogram.*",
    "aiohttp.*",
    "beautifulsoup4.*",
    "bs4.*",
    "pandas.*",
    "pypdf2.*",
    "lxml.*",
    "dotenv.*",
    "pydantic_settings.*",
    "requests.*",
    "openai.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "venv/*",
    "env/*",
    ".venv/*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
